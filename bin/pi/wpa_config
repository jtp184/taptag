#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org/'

  gem 'colorize'
  gem 'tty-prompt'
end

# Set up the prompt for user input
prompt = TTY::Prompt.new(
  interrupt: -> { puts 'x'.light_black; puts 'Goodbye'.red; abort }
)

module Taptag
  module Pi
    # Captures multiple wifi network setups and the country code, generates the
    # file via its to_s method
    class WifiConfig
      # Stores the Wifi Credentials the user passes in
      WifiCredentials = Struct.new(:ssid, :password, :priority) do
        def to_s
          %(network={\n  ssid="#{ssid}"\n  psk="#{password}"\n  priority=#{priority}\n})
        end
      end

      # The array of networks this config shares
      attr_accessor :networks
      # The country code provided by the user
      attr_accessor :country_code

      # Take in +opts+ for networks and country_code
      def initialize(opts = {})
        @networks = opts.fetch(:networks, [])
        @country_code = opts.fetch(:country_code, 'US')
      end

      # Runs the build method and returns the result
      def to_s
        build
      end

      # Adds a priority based on index to the networks
      def prioritize_networks
        networks.each_with_index { |n, i| n.priority = i + 1 }
        self
      end

      private

      # Adds together the preamble and country code to the networks to make the
      # completed file contents string
      def build
        str = +''
        str += preamble.join("\n")
        str += "\n"
        str += "country=#{country_code}"
        str += "\n"
        str += "\n"
        str + networks.map(&:to_s).join("\n\n")
      end

      # Two opening lines present in a wpa_config
      def preamble
        [
          'ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev',
          'update_config=1'
        ]
      end
    end
  end
end

# Create the config holder
@conf = Taptag::Pi::WifiConfig.new(
  country_code: prompt.ask('Country Code:', default: 'US')
)

# Perform this once, repeat if prompted
1.times do
  puts

  # Get a network name / password
  cred = prompt.collect do
    key(:ssid).ask('Network Name:')
    key(:password).mask('Network password:')
  end

  puts

  # Add the credentials to the config
  @conf.networks << Taptag::Pi::WifiConfig::WifiCredentials.new(
    cred[:ssid],
    cred[:password]
  )

  # Redo if prompted
  redo if prompt.yes?('Add another network?')
end

# Path to save to
file_abs_name = Pathname.new(prompt.ask('Path to save to:', default: './'))
                        .join('wpa_supplicant.conf')

# Save out and report success
File.open(file_abs_name, 'w+') { |f| f << @conf.prioritize_networks.to_s }
puts 'Saved to '.green + file_abs_name.to_s
